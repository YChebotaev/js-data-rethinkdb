{"version":3,"file":null,"sources":["../src/index.js"],"sourcesContent":["import {utils} from 'js-data'\nimport {\n  Adapter,\n  reserved\n} from 'js-data-adapter'\nimport rethinkdbdash from 'rethinkdbdash'\nimport underscore from 'mout/string/underscore'\n\nconst __super__ = Adapter.prototype\n\nconst R_OPTS_DEFAULTS = {\n  db: 'test'\n}\nconst INSERT_OPTS_DEFAULTS = {}\nconst UPDATE_OPTS_DEFAULTS = {}\nconst DELETE_OPTS_DEFAULTS = {}\nconst RUN_OPTS_DEFAULTS = {}\n\nconst equal = function (r, row, field, value) {\n  return row(field).default(null).eq(value)\n}\n\nconst notEqual = function (r, row, field, value) {\n  return row(field).default(null).ne(value)\n}\n\n/**\n * Default predicate functions for the filtering operators.\n *\n * @name module:js-data-rethinkdb.OPERATORS\n * @property {Function} = Equality operator.\n * @property {Function} == Equality operator.\n * @property {Function} != Inequality operator.\n * @property {Function} > \"Greater than\" operator.\n * @property {Function} >= \"Greater than or equal to\" operator.\n * @property {Function} < \"Less than\" operator.\n * @property {Function} <= \"Less than or equal to\" operator.\n * @property {Function} isectEmpty Operator to test that the intersection\n * between two arrays is empty.\n * @property {Function} isectNotEmpty Operator to test that the intersection\n * between two arrays is NOT empty.\n * @property {Function} in Operator to test whether a value is found in the\n * provided array.\n * @property {Function} notIn Operator to test whether a value is NOT found in\n * the provided array.\n * @property {Function} contains Operator to test whether an array contains the\n * provided value.\n * @property {Function} notContains Operator to test whether an array does NOT\n * contain the provided value.\n */\nexport const OPERATORS = {\n  '=': equal,\n  '==': equal,\n  '===': equal,\n  '!=': notEqual,\n  '!==': notEqual,\n  '>': function (r, row, field, value) {\n    return row(field).default(null).gt(value)\n  },\n  '>=': function (r, row, field, value) {\n    return row(field).default(null).ge(value)\n  },\n  '<': function (r, row, field, value) {\n    return row(field).default(null).lt(value)\n  },\n  '<=': function (r, row, field, value) {\n    return row(field).default(null).le(value)\n  },\n  'isectEmpty': function (r, row, field, value) {\n    return row(field).default([]).setIntersection(r.expr(value).default([])).count().eq(0)\n  },\n  'isectNotEmpty': function (r, row, field, value) {\n    return row(field).default([]).setIntersection(r.expr(value).default([])).count().ne(0)\n  },\n  'in': function (r, row, field, value) {\n    return r.expr(value).default(r.expr([])).contains(row(field).default(null))\n  },\n  'notIn': function (r, row, field, value) {\n    return r.expr(value).default(r.expr([])).contains(row(field).default(null)).not()\n  },\n  'contains': function (r, row, field, value) {\n    return row(field).default([]).contains(value)\n  },\n  'notContains': function (r, row, field, value) {\n    return row(field).default([]).contains(value).not()\n  }\n}\n\nObject.freeze(OPERATORS)\n\n/**\n * RethinkDBAdapter class.\n *\n * @example\n * // Use Container instead of DataStore on the server\n * import {Container} from 'js-data'\n * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n *\n * // Create a store to hold your Mappers\n * const store = new Container()\n *\n * // Create an instance of RethinkDBAdapter with default settings\n * const adapter = new RethinkDBAdapter()\n *\n * // Mappers in \"store\" will use the RethinkDB adapter by default\n * store.registerAdapter('rethinkdb', adapter, { default: true })\n *\n * // Create a Mapper that maps to a \"user\" table\n * store.defineMapper('user')\n *\n * @class RethinkDBAdapter\n * @extends Adapter\n * @param {Object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Adapter#debug}.\n * @param {Object} [opts.deleteOpts={}] See {@link RethinkDBAdapter#deleteOpts}.\n * @param {Object} [opts.insertOpts={}] See {@link RethinkDBAdapter#insertOpts}.\n * @param {Object} [opts.operators={@link module:js-data-rethinkdb.OPERATORS}] See {@link RethinkDBAdapter#operators}.\n * @param {Object} [opts.r] See {@link RethinkDBAdapter#r}.\n * @param {boolean} [opts.raw=false] See {@link Adapter#raw}.\n * @param {Object} [opts.rOpts={}] See {@link RethinkDBAdapter#rOpts}.\n * @param {Object} [opts.runOpts={}] See {@link RethinkDBAdapter#runOpts}.\n * @param {Object} [opts.updateOpts={}] See {@link RethinkDBAdapter#updateOpts}.\n */\nexport function RethinkDBAdapter (opts) {\n  utils.classCallCheck(this, RethinkDBAdapter)\n  opts || (opts = {})\n\n  // Setup non-enumerable properties\n  Object.defineProperties(this, {\n    /**\n     * The rethinkdbdash instance used by this adapter. Use this directly when\n     * you need to write custom queries.\n     *\n     * @example <caption>Use default instance.</caption>\n     * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n     * const adapter = new RethinkDBAdapter()\n     * adapter.r.dbDrop('foo').then(...)\n     *\n     * @example <caption>Configure default instance.</caption>\n     * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n     * const adapter = new RethinkDBAdapter({\n     *   rOpts: {\n     *     user: 'myUser',\n     *     password: 'myPassword'\n     *   }\n     * })\n     * adapter.r.dbDrop('foo').then(...)\n     *\n     * @example <caption>Provide a custom instance.</caption>\n     * import rethinkdbdash from 'rethinkdbdash'\n     * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n     * const r = rethinkdbdash()\n     * const adapter = new RethinkDBAdapter({\n     *   r: r\n     * })\n     * adapter.r.dbDrop('foo').then(...)\n     *\n     * @name RethinkDBAdapter#r\n     * @type {Object}\n     */\n    r: {\n      writable: true,\n      value: undefined\n    },\n    databases: {\n      value: {}\n    },\n    indices: {\n      value: {}\n    },\n    tables: {\n      value: {}\n    }\n  })\n\n  Adapter.call(this, opts)\n\n  /**\n   * Default options to pass to r#insert.\n   *\n   * @name RethinkDBAdapter#insertOpts\n   * @type {Object}\n   * @default {}\n   */\n  this.insertOpts || (this.insertOpts = {})\n  utils.fillIn(this.insertOpts, INSERT_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to r#update.\n   *\n   * @name RethinkDBAdapter#updateOpts\n   * @type {Object}\n   * @default {}\n   */\n  this.updateOpts || (this.updateOpts = {})\n  utils.fillIn(this.updateOpts, UPDATE_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to r#delete.\n   *\n   * @name RethinkDBAdapter#deleteOpts\n   * @type {Object}\n   * @default {}\n   */\n  this.deleteOpts || (this.deleteOpts = {})\n  utils.fillIn(this.deleteOpts, DELETE_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to r#run.\n   *\n   * @name RethinkDBAdapter#runOpts\n   * @type {Object}\n   * @default {}\n   */\n  this.runOpts || (this.runOpts = {})\n  utils.fillIn(this.runOpts, RUN_OPTS_DEFAULTS)\n\n  /**\n   * Override the default predicate functions for the specified operators.\n   *\n   * @name RethinkDBAdapter#operators\n   * @type {Object}\n   * @default {}\n   */\n  this.operators || (this.operators = {})\n  utils.fillIn(this.operators, OPERATORS)\n\n  /**\n   * Options to pass to a new `rethinkdbdash` instance, if one was not provided\n   * at {@link RethinkDBAdapter#r}. See the [rethinkdbdash README][readme] for\n   * instance options.\n   *\n   * [readme]: https://github.com/neumino/rethinkdbdash#importing-the-driver\n   *\n   * @example <caption>Connect to localhost:8080, and let the driver find other instances.</caption>\n   * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n   * const adapter = new RethinkDBAdapter({\n   *   rOpts: {\n   *     discovery: true\n   *   }\n   * })\n   *\n   * @example <caption>Connect to and only to localhost:8080.</caption>\n   * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n   * const adapter = new RethinkDBAdapter()\n   *\n   * @example <caption>Do not create a connection pool.</caption>\n   * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n   * const adapter = new RethinkDBAdapter({\n   *   rOpts: {\n   *     pool: false\n   *   }\n   * })\n   *\n   * @example <caption>Connect to a cluster seeding from `192.168.0.100`, `192.168.0.101`, `192.168.0.102`.</caption>\n   * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n   * const adapter = new RethinkDBAdapter({\n   *   rOpts: {\n   *     servers: [\n   *       { host: '192.168.0.100', port: 28015 },\n   *       { host: '192.168.0.101', port: 28015 },\n   *       { host: '192.168.0.102', port: 28015 }\n   *     ]\n   *   }\n   * })\n   *\n   * @name RethinkDBAdapter#rOpts\n   * @see https://github.com/neumino/rethinkdbdash#importing-the-driver\n   * @type {Object}\n   */\n  this.rOpts || (this.rOpts = {})\n  utils.fillIn(this.rOpts, R_OPTS_DEFAULTS)\n\n  this.r || (this.r = rethinkdbdash(this.rOpts))\n}\n\n// Setup prototype inheritance from Adapter\nRethinkDBAdapter.prototype = Object.create(Adapter.prototype, {\n  constructor: {\n    value: RethinkDBAdapter,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n})\n\nObject.defineProperty(RethinkDBAdapter, '__super__', {\n  configurable: true,\n  value: Adapter\n})\n\n/**\n * Alternative to ES6 class syntax for extending `RethinkDBAdapter`.\n *\n * @example <caption>Using the ES2015 class syntax.</caption>\n * class MyRethinkDBAdapter extends RethinkDBAdapter {...}\n * const adapter = new MyRethinkDBAdapter()\n *\n * @example <caption>Using {@link RethinkDBAdapter.extend}.</caption>\n * var instanceProps = {...}\n * var classProps = {...}\n *\n * var MyRethinkDBAdapter = RethinkDBAdapter.extend(instanceProps, classProps)\n * var adapter = new MyRethinkDBAdapter()\n *\n * @method RethinkDBAdapter.extend\n * @static\n * @param {Object} [instanceProps] Properties that will be added to the\n * prototype of the subclass.\n * @param {Object} [classProps] Properties that will be added as static\n * properties to the subclass itself.\n * @return {Constructor} Subclass of `RethinkDBAdapter`.\n */\nRethinkDBAdapter.extend = utils.extend\n\nutils.addHiddenPropsToTarget(RethinkDBAdapter.prototype, {\n  _handleErrors (cursor) {\n    if (cursor && cursor.errors > 0) {\n      if (cursor.first_error) {\n        throw new Error(cursor.first_error)\n      }\n      throw new Error('Unknown RethinkDB Error')\n    }\n  },\n\n  _count (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .count()\n      .run(this.getOpt('runOpts', opts))\n      .then((count) => [count, {}])\n  },\n\n  _create (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    const insertOpts = this.getOpt('insertOpts', opts)\n    insertOpts.returnChanges = true\n\n    return this.selectTable(mapper, opts)\n      .insert(props, insertOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        let record\n        if (cursor && cursor.changes && cursor.changes.length && cursor.changes[0].new_val) {\n          record = cursor.changes[0].new_val\n        }\n        return [record, cursor]\n      })\n  },\n\n  _createMany (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    const insertOpts = this.getOpt('insertOpts', opts)\n    insertOpts.returnChanges = true\n\n    return this.selectTable(mapper, opts)\n      .insert(props, insertOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        let records = []\n        if (cursor && cursor.changes && cursor.changes.length && cursor.changes) {\n          records = cursor.changes.map((change) => change.new_val)\n        }\n        return [records, cursor]\n      })\n  },\n\n  _destroy (mapper, id, opts) {\n    opts || (opts = {})\n\n    return this.selectTable(mapper, opts)\n      .get(id)\n      .delete(this.getOpt('deleteOpts', opts))\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        return [undefined, cursor]\n      })\n  },\n\n  _destroyAll (mapper, query, opts) {\n    query || (query = {})\n    opts || (opts = {})\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .delete(this.getOpt('deleteOpts', opts))\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        return [undefined, cursor]\n      })\n  },\n\n  _find (mapper, id, opts) {\n    opts || (opts = {})\n\n    return this.selectTable(mapper, opts)\n      .get(id)\n      .run(this.getOpt('runOpts', opts))\n      .then((record) => [record, {}])\n  },\n\n  _findAll (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .run(this.getOpt('runOpts', opts))\n      .then((records) => [records, {}])\n  },\n\n  _sum (mapper, field, query, opts) {\n    if (!utils.isString(field)) {\n      throw new Error('field must be a string!')\n    }\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .sum(field)\n      .run(this.getOpt('runOpts', opts))\n      .then((sum) => [sum, {}])\n  },\n\n  _update (mapper, id, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    const updateOpts = this.getOpt('updateOpts', opts)\n    updateOpts.returnChanges = true\n\n    return this.selectTable(mapper, opts)\n      .get(id)\n      .update(props, updateOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        let record\n        this._handleErrors(cursor)\n        if (cursor && cursor.changes && cursor.changes.length && cursor.changes[0].new_val) {\n          record = cursor.changes[0].new_val\n        } else {\n          throw new Error('Not Found')\n        }\n        return [record, cursor]\n      })\n  },\n\n  _updateAll (mapper, props, query, opts) {\n    props || (props = {})\n    query || (query = {})\n    opts || (opts = {})\n\n    const updateOpts = this.getOpt('updateOpts', opts)\n    updateOpts.returnChanges = true\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .update(props, updateOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        let records = []\n        this._handleErrors(cursor)\n        if (cursor && cursor.changes && cursor.changes.length) {\n          records = cursor.changes.map((change) => change.new_val)\n        }\n        return [records, cursor]\n      })\n  },\n\n  _updateMany (mapper, records, opts) {\n    records || (records = [])\n    opts || (opts = {})\n\n    const insertOpts = this.getOpt('insertOpts', opts)\n    insertOpts.returnChanges = true\n    insertOpts.conflict = 'update'\n\n    return this.selectTable(mapper, opts)\n      .insert(records, insertOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        records = []\n        this._handleErrors(cursor)\n        if (cursor && cursor.changes && cursor.changes.length) {\n          records = cursor.changes.map((change) => change.new_val)\n        }\n        return [records, cursor]\n      })\n  },\n\n  _applyWhereFromObject (where) {\n    const fields = []\n    const ops = []\n    const predicates = []\n    utils.forOwn(where, (clause, field) => {\n      if (!utils.isObject(clause)) {\n        clause = {\n          '==': clause\n        }\n      }\n      utils.forOwn(clause, (expr, op) => {\n        fields.push(field)\n        ops.push(op)\n        predicates.push(expr)\n      })\n    })\n    return {\n      fields,\n      ops,\n      predicates\n    }\n  },\n\n  _applyWhereFromArray (where) {\n    const groups = []\n    where.forEach((_where, i) => {\n      if (utils.isString(_where)) {\n        return\n      }\n      const prev = where[i - 1]\n      const parser = utils.isArray(_where) ? this._applyWhereFromArray : this._applyWhereFromObject\n      const group = parser.call(this, _where)\n      if (prev === 'or') {\n        group.isOr = true\n      }\n      groups.push(group)\n    })\n    groups.isArray = true\n    return groups\n  },\n\n  _testObjectGroup (rql, group, row, opts) {\n    let i\n    const r = this.r\n    const fields = group.fields\n    const ops = group.ops\n    const predicates = group.predicates\n    const len = ops.length\n    for (i = 0; i < len; i++) {\n      let op = ops[i]\n      const isOr = op.charAt(0) === '|'\n      op = isOr ? op.substr(1) : op\n      const predicateFn = this.getOperator(op, opts)\n      if (predicateFn) {\n        const predicateResult = predicateFn(r, row, fields[i], predicates[i])\n        if (isOr) {\n          rql = rql ? rql.or(predicateResult) : predicateResult\n        } else {\n          rql = rql ? rql.and(predicateResult) : predicateResult\n        }\n      } else {\n        throw new Error(`Operator ${op} not supported!`)\n      }\n    }\n    return rql\n  },\n\n  _testArrayGroup (rql, groups, row, opts) {\n    let i\n    const len = groups.length\n    for (i = 0; i < len; i++) {\n      const group = groups[i]\n      let subQuery\n      if (group.isArray) {\n        subQuery = this._testArrayGroup(rql, group, row, opts)\n      } else {\n        subQuery = this._testObjectGroup(null, group, row, opts)\n      }\n      if (groups[i - 1]) {\n        if (group.isOr) {\n          rql = rql.or(subQuery)\n        } else {\n          rql = rql.and(subQuery)\n        }\n      } else {\n        rql = rql ? rql.and(subQuery) : subQuery\n      }\n    }\n    return rql\n  },\n\n  /**\n   * Apply the specified selection query to the provided RQL sequence.\n   *\n   * @name RethinkDBAdapter#filterSequence\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {Object} [query] Selection query.\n   * @param {Object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   */\n  filterSequence (sequence, query, opts) {\n    const r = this.r\n\n    query = utils.plainCopy(query || {})\n    opts || (opts = {})\n    opts.operators || (opts.operators = {})\n    query.where || (query.where = {})\n    query.orderBy || (query.orderBy = query.sort)\n    query.orderBy || (query.orderBy = [])\n    query.skip || (query.skip = query.offset)\n\n    // Transform non-keyword properties to \"where\" clause configuration\n    utils.forOwn(query, (config, keyword) => {\n      if (reserved.indexOf(keyword) === -1) {\n        if (utils.isObject(config)) {\n          query.where[keyword] = config\n        } else {\n          query.where[keyword] = {\n            '==': config\n          }\n        }\n        delete query[keyword]\n      }\n    })\n\n    let rql = sequence\n\n    // Filter\n    let groups\n\n    if (utils.isObject(query.where) && Object.keys(query.where).length !== 0) {\n      groups = this._applyWhereFromArray([query.where])\n    } else if (utils.isArray(query.where)) {\n      groups = this._applyWhereFromArray(query.where)\n    }\n\n    if (groups) {\n      rql = rql.filter((row) => this._testArrayGroup(null, groups, row, opts) || true)\n    }\n\n    // Sort\n    if (query.orderBy) {\n      if (utils.isString(query.orderBy)) {\n        query.orderBy = [\n          [query.orderBy, 'asc']\n        ]\n      }\n      for (var i = 0; i < query.orderBy.length; i++) {\n        if (utils.isString(query.orderBy[i])) {\n          query.orderBy[i] = [query.orderBy[i], 'asc']\n        }\n        rql = (query.orderBy[i][1] || '').toUpperCase() === 'DESC' ? rql.orderBy(r.desc(query.orderBy[i][0])) : rql.orderBy(query.orderBy[i][0])\n      }\n    }\n\n    // Offset\n    if (query.skip) {\n      rql = rql.skip(+query.skip)\n    }\n\n    // Limit\n    if (query.limit) {\n      rql = rql.limit(+query.limit)\n    }\n\n    return rql\n  },\n\n  selectDb (opts) {\n    return this.r.db(utils.isUndefined(opts.db) ? this.rOpts.db : opts.db)\n  },\n\n  selectTable (mapper, opts) {\n    return this.selectDb(opts).table(mapper.table || underscore(mapper.name))\n  },\n\n  waitForDb (opts) {\n    opts || (opts = {})\n    const db = utils.isUndefined(opts.db) ? this.rOpts.db : opts.db\n    if (!this.databases[db]) {\n      this.databases[db] = this.r.branch(\n        this.r.dbList().contains(db),\n        true,\n        this.r.dbCreate(db)\n      ).run()\n    }\n    return this.databases[db]\n  },\n\n  waitForTable (mapper, opts) {\n    opts || (opts = {})\n    const table = utils.isString(mapper) ? mapper : (mapper.table || underscore(mapper.name))\n    let db = utils.isUndefined(opts.db) ? this.rOpts.db : opts.db\n    return this.waitForDb(opts).then(() => {\n      this.tables[db] = this.tables[db] || {}\n      if (!this.tables[db][table]) {\n        this.tables[db][table] = this.r.branch(this.r.db(db).tableList().contains(table), true, this.r.db(db).tableCreate(table)).run()\n      }\n      return this.tables[db][table]\n    })\n  },\n\n  waitForIndex (table, index, opts) {\n    opts || (opts = {})\n    let db = utils.isUndefined(opts.db) ? this.rOpts.db : opts.db\n    return this.waitForDb(opts).then(() => this.waitForTable(table, opts)).then(() => {\n      this.indices[db] = this.indices[db] || {}\n      this.indices[db][table] = this.indices[db][table] || {}\n      if (!this.tables[db][table][index]) {\n        this.tables[db][table][index] = this.r.branch(this.r.db(db).table(table).indexList().contains(index), true, this.r.db(db).table(table).indexCreate(index)).run().then(() => {\n          return this.r.db(db).table(table).indexWait(index).run()\n        })\n      }\n      return this.tables[db][table][index]\n    })\n  },\n\n  /**\n   * Return the number of records that match the selection query.\n   *\n   * @name RethinkDBAdapter#count\n   * @method\n   * @param {Object} mapper the mapper.\n   * @param {Object} [query] Selection query.\n   * @param {Object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  count (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.count.call(this, mapper, query, opts))\n  },\n\n  /**\n   * Create a new record.\n   *\n   * @name RethinkDBAdapter#create\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {Object} props The record to be created.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.insertOpts] Options to pass to r#insert.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  create (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.create.call(this, mapper, props, opts))\n  },\n\n  /**\n   * Create multiple records in a single batch.\n   *\n   * @name RethinkDBAdapter#createMany\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {Object} props The records to be created.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.insertOpts] Options to pass to r#insert.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  createMany (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.createMany.call(this, mapper, props, opts))\n  },\n\n  /**\n   * Destroy the record with the given primary key.\n   *\n   * @name RethinkDBAdapter#destroy\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to destroy.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.deleteOpts] Options to pass to r#delete.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  destroy (mapper, id, opts) {\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.destroy.call(this, mapper, id, opts))\n  },\n\n  /**\n   * Destroy the records that match the selection query.\n   *\n   * @name RethinkDBAdapter#destroyAll\n   * @method\n   * @param {Object} mapper the mapper.\n   * @param {Object} [query] Selection query.\n   * @param {Object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.deleteOpts] Options to pass to r#delete.\n   * @param {Object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  destroyAll (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.destroyAll.call(this, mapper, query, opts))\n  },\n\n  /**\n   * Retrieve the record with the given primary key.\n   *\n   * @name RethinkDBAdapter#find\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to retrieve.\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @param {string[]} [opts.with=[]] Relations to eager load.\n   * @return {Promise}\n   */\n  find (mapper, id, opts) {\n    opts || (opts = {})\n    opts.with || (opts.with = [])\n\n    const relationList = mapper.relationList || []\n    let tasks = [this.waitForTable(mapper, opts)]\n\n    relationList.forEach((def) => {\n      const relationName = def.relation\n      const relationDef = def.getRelation()\n      if (!opts.with || opts.with.indexOf(relationName) === -1) {\n        return\n      }\n      if (def.foreignKey && def.type !== 'belongsTo') {\n        if (def.type === 'belongsTo') {\n          tasks.push(this.waitForIndex(mapper.table || underscore(mapper.name), def.foreignKey, opts))\n        } else {\n          tasks.push(this.waitForIndex(relationDef.table || underscore(relationDef.name), def.foreignKey, opts))\n        }\n      }\n    })\n    return Promise.all(tasks).then(() => __super__.find.call(this, mapper, id, opts))\n  },\n\n  /**\n   * Retrieve the records that match the selection query.\n   *\n   * @name RethinkDBAdapter#findAll\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {Object} [query] Selection query.\n   * @param {Object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @param {string[]} [opts.with=[]] Relations to eager load.\n   * @return {Promise}\n   */\n  findAll (mapper, query, opts) {\n    opts || (opts = {})\n    opts.with || (opts.with = [])\n    query || (query = {})\n\n    const relationList = mapper.relationList || []\n    let tasks = [this.waitForTable(mapper, opts)]\n\n    relationList.forEach((def) => {\n      const relationName = def.relation\n      const relationDef = def.getRelation()\n      if (!opts.with || opts.with.indexOf(relationName) === -1) {\n        return\n      }\n      if (def.foreignKey && def.type !== 'belongsTo') {\n        if (def.type === 'belongsTo') {\n          tasks.push(this.waitForIndex(mapper.table || underscore(mapper.name), def.foreignKey, opts))\n        } else {\n          tasks.push(this.waitForIndex(relationDef.table || underscore(relationDef.name), def.foreignKey, opts))\n        }\n      }\n    })\n    return Promise.all(tasks).then(() => __super__.findAll.call(this, mapper, query, opts))\n  },\n\n  /**\n   * Resolve the predicate function for the specified operator based on the\n   * given options and this adapter's settings.\n   *\n   * @name RethinkDBAdapter#getOperator\n   * @method\n   * @param {string} operator The name of the operator.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @return {*} The predicate function for the specified operator.\n   */\n  getOperator (operator, opts) {\n    opts || (opts = {})\n    opts.operators || (opts.operators = {})\n    let ownOps = this.operators || {}\n    return utils.isUndefined(opts.operators[operator]) ? ownOps[operator] : opts.operators[operator]\n  },\n\n  /**\n   * Return the sum of the specified field of records that match the selection\n   * query.\n   *\n   * @name RethinkDBAdapter#sum\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {string} field The field to sum.\n   * @param {Object} [query] Selection query.\n   * @param {Object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  sum (mapper, field, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.sum.call(this, mapper, field, query, opts))\n  },\n\n  /**\n   * Apply the given update to the record with the specified primary key.\n   *\n   * @name RethinkDBAdapter#update\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {(string|number)} id The primary key of the record to be updated.\n   * @param {Object} props The update to apply to the record.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.updateOpts] Options to pass to r#update.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  update (mapper, id, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.update.call(this, mapper, id, props, opts))\n  },\n\n  /**\n   * Apply the given update to all records that match the selection query.\n   *\n   * @name RethinkDBAdapter#updateAll\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {Object} props The update to apply to the selected records.\n   * @param {Object} [query] Selection query.\n   * @param {Object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @param {Object} [opts.updateOpts] Options to pass to r#update.\n   * @return {Promise}\n   */\n  updateAll (mapper, props, query, opts) {\n    props || (props = {})\n    query || (query = {})\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.updateAll.call(this, mapper, props, query, opts))\n  },\n\n  /**\n   * Update the given records in a single batch.\n   *\n   * @name RethinkDBAdapter#updateMany\n   * @method\n   * @param {Object} mapper The mapper.\n   * @param {Object[]} records The records to update.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.insertOpts] Options to pass to r#insert.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {Object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  updateMany (mapper, records, opts) {\n    records || (records = [])\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.updateMany.call(this, mapper, records, opts))\n  }\n})\n\n/**\n * Details of the current version of the `js-data-rethinkdb` module.\n *\n * @example <caption>ES2015 modules import</caption>\n * import {version} from 'js-data-rethinkdb'\n * console.log(version.full)\n *\n * @example <caption>CommonJS import</caption>\n * var version = require('js-data-rethinkdb').version\n * console.log(version.full)\n *\n * @name module:js-data-rethinkdb.version\n * @type {Object}\n * @property {string} version.full The full semver value.\n * @property {number} version.major The major version number.\n * @property {number} version.minor The minor version number.\n * @property {number} version.patch The patch version number.\n * @property {(string|boolean)} version.alpha The alpha version value,\n * otherwise `false` if the current version is not alpha.\n * @property {(string|boolean)} version.beta The beta version value,\n * otherwise `false` if the current version is not beta.\n */\nexport const version = '<%= version %>'\n\n/**\n * {@link RethinkDBAdapter} class.\n *\n * @example <caption>ES2015 modules import</caption>\n * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n * const adapter = new RethinkDBAdapter()\n *\n * @example <caption>CommonJS import</caption>\n * var RethinkDBAdapter = require('js-data-rethinkdb').RethinkDBAdapter\n * var adapter = new RethinkDBAdapter()\n *\n * @name module:js-data-rethinkdb.RethinkDBAdapter\n * @see RethinkDBAdapter\n * @type {Constructor}\n */\n\n/**\n * Registered as `js-data-rethinkdb` in NPM.\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save js-data-rethinkdb@beta js-data@beta rethinkdbdash\n *\n * @example <caption>ES2015 modules import</caption>\n * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n * const adapter = new RethinkDBAdapter()\n *\n * @example <caption>CommonJS import</caption>\n * var RethinkDBAdapter = require('js-data-rethinkdb').RethinkDBAdapter\n * var adapter = new RethinkDBAdapter()\n *\n * @module js-data-rethinkdb\n */\n"],"names":["Adapter","utils","reserved"],"mappings":"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"}